class Solution: #creating a class solutions
    def twoSum(self, nums: List[int], target: int) -> List[int]: #defining a method twosum, take 3 parameters self,nums(array of integers),terget(sum of the integers). List[int] indiacates that this method is expectd to return a list of integers that sum up to targer
        num_to_index = {} #initializes an empty dictonary. Mapping each number in nums to its index for a quick lookup
        for index, num in enumerate(nums): #this loop matches the number with its index and enumerate() makes it a list
            diffrence = target - num #we know the target and the current num on the list. need to see if it matches.
            if diffrence in num_to_index:  #checking if the diffrence is in the num_to_index list
                return (num_to_index[diffrence], index) #if found, then this returns a tuple with the index of the compliment, which is the answer to the problem 
            num_to_index[num] = index #if the number is not found in the dict then we add that number and its index to the num_to_index, this allows us to use this list for future iterations.
        return None #if no solutions is found then this line is processed but usually it doesnt reach this line because the problem guarentees that its solvable
        